#include "scheduler.h"
#include <stddef.h>

sTask SCH_tasks_G[SCH_MAX_TASKS];

void SCH_Init(void) {
    for (uint32_t i = 0; i < SCH_MAX_TASKS; i++) {
        SCH_Delete_Task(i);
    }
}

uint32_t SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
    uint32_t index = 0;

    // tim vi tri trong
    while ((SCH_tasks_G[index].pTask != NULL) && (index < SCH_MAX_TASKS)) {
        index++;
    }

    // if full=> error
    if (index == SCH_MAX_TASKS) {

        return SCH_MAX_TASKS;
    }


    SCH_tasks_G[index].pTask = pFunction;
    SCH_tasks_G[index].Delay = DELAY;
    SCH_tasks_G[index].Period = PERIOD;
    SCH_tasks_G[index].RunMe = 0;
    SCH_tasks_G[index].TaskID = index;

    return index;
}

void SCH_Update(void) {
    for (uint32_t i = 0; i < SCH_MAX_TASKS; i++) {

        if (SCH_tasks_G[i].pTask) {
            if (SCH_tasks_G[i].Delay == 0) {
                SCH_tasks_G[i].RunMe = 1; // update runtime
                 if (SCH_tasks_G[i].Period) {
                    // tac vu lien tuc => gan lai delay
                    SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
                 }

            } else {

                SCH_tasks_G[i].Delay -= 1;
            }
        }
    }
}

void SCH_Dispatch_Tasks(void) {
    for (uint32_t i = 0; i < SCH_MAX_TASKS; i++) {
        if (SCH_tasks_G[i].RunMe > 0) {
            (*SCH_tasks_G[i].pTask)();
            SCH_tasks_G[i].RunMe = 0; // reset RunMe

            // if it is once times, delete it
            if (SCH_tasks_G[i].Period == 0) {
                SCH_Delete_Task(i);
            }
        }
    }
}

uint8_t SCH_Delete_Task(uint32_t taskID) {
    if (SCH_tasks_G[taskID] == NULL	 ) {
        return 1; // already delete
    }

    SCH_tasks_G[taskID].pTask = NULL;
    SCH_tasks_G[taskID].Delay = 0;
    SCH_tasks_G[taskID].Period = 0;
    SCH_tasks_G[taskID].RunMe = 0;

    return 0; // delete success
}
